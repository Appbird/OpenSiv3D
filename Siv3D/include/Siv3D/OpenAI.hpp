//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2022 Ryo Suzuki
//	Copyright (c) 2016-2022 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# pragma once
# include "Common.hpp"
# include "String.hpp"
# include "AsyncHTTPTask.hpp"
# include "2DShapes.hpp"
# include "Image.hpp"

/*
	このライブラリは、OpenAI の ChatGPT と DALL-E モデルを使用して、テキストベースの会話や画像生成を行うための API を提供します。主な関数は以下の通りです。

		OpenAI::Chat::Complete() - ChatGPT にメッセージを送信し、返答メッセージを取得します。
		OpenAI::Chat::CompleteAsync() - ChatGPTに メッセージを送信し、レスポンス（JSON）を取得する非同期タスクを返します。
		OpenAI::Chat::GetContent() - ChatGPT のレスポンス（JSON）から、返答メッセージを抽出して返します。
		OpenAI::Image::Create() - テキストに基づいて DALL-E モデルを使用して生成された画像を取得します。
		OpenAI::Image::CreateAsync() - テキストに基づいて DALL-E モデルを使用して画像を生成する非同期タスクを返します。

	This library provides an API to interact with OpenAI's ChatGPT and DALL-E models for text-based conversations and image generation. The main functions are as follows:

		OpenAI::Chat::Complete() - Sends a message to ChatGPT and retrieves the response message.
		OpenAI::Chat::CompleteAsync() - Returns an asynchronous task that sends a message to ChatGPT and retrieves the response (JSON).
		OpenAI::Chat::GetContent() - Extracts and returns the response message from the ChatGPT response (JSON).
		OpenAI::Image::Create() - Get one or more images generated by the DALL-E model based on the given text.
		OpenAI::Image::CreateAsync() - Returns an asynchronous task that generates one or more images using the DALL-E model based on the given text.
*/

namespace s3d
{
	namespace OpenAI
	{
		/// @brief 256x256 ピクセルの画像サイズ | Image size of 256x256 pixels
		inline constexpr Size ImageSize256{ 256, 256 };

		/// @brief 512x512 ピクセルの画像サイズ | Image size of 512x512 pixels
		inline constexpr Size ImageSize512{ 512, 512 };

		/// @brief 1024x1024 ピクセルの画像サイズ | Image size of 1024x1024 pixels
		inline constexpr Size ImageSize1024{ 1024, 1024 };

		/// @brief 生成できる最大の画像の個数 | Maximum number of images that can be generated
		inline constexpr int32 MaxImageCount = 10;

		namespace Chat
		{
			/// @brief ChatGPT にメッセージを送り、その返答メッセージを取得します。 | Sends a message to ChatGPT and retrieves the response message.
			/// @param apiKey OpenAI API キー | OpenAI API key
			/// @param message メッセージ | Message
			/// @return 返答メッセージ。取得に失敗した場合は空の文字列 | Response message. An empty string if the retrieval fails.
			/// @remark インターネットアクセスが必要です。 | Internet access is required.
			[[nodiscard]]
			String Complete(StringView apiKey, StringView message);

			/// @brief ChatGPT にメッセージを送り、その返答メッセージを取得します。 | Sends a message to ChatGPT and retrieves the response message.
			/// @param apiKey OpenAI API キー | OpenAI API key
			/// @param message メッセージ | Message
			/// @param error エラーメッセージの格納先。エラーが無い場合は空の文字列になる | Destination for the error message. Will be an empty string if no error occurs.
			/// @return 返答メッセージ。取得に失敗した場合は空の文字列 | Response message. An empty string if the retrieval fails.
			/// @remark インターネットアクセスが必要です。 | Internet access is required.
			[[nodiscard]]
			String Complete(StringView apiKey, StringView message, String& error);

			/// @brief ChatGPT にメッセージを送り、その返答メッセージを取得します。 | Sends messages to ChatGPT and retrieves the response message.
			/// @param apiKey OpenAI API キー | OpenAI API key
			/// @param messages メッセージ（ロールとメッセージのペアの配列） | Array of message pairs (role and message)
			/// @return 返答メッセージ。取得に失敗した場合は空の文字列 | Response message. An empty string if the retrieval fails.
			/// @remark ロールは U"system", U"user", U"assistant" の 3 種類です。 | Roles are U"system", U"user", and U"assistant".
			/// @remark インターネットアクセスが必要です。 | Internet access is required.
			[[nodiscard]]
			String Complete(StringView apiKey, const Array<std::pair<String, String>>& messages);

			/// @brief ChatGPT にメッセージを送り、その返答メッセージを取得します。 | Sends messages to ChatGPT and retrieves the response message.
			/// @param apiKey OpenAI API キー | OpenAI API key
			/// @param messages メッセージ（ロールとメッセージのペアの配列） | Array of message pairs (role and message)
			/// @param error エラーメッセージの格納先。エラーが無い場合は空の文字列になる | Destination for the error message. Will be an empty string if no error occurs.
			/// @return 返答メッセージ。取得に失敗した場合は空の文字列 | Response message. An empty string if the retrieval fails.
			/// @remark ロールは U"system", U"user", U"assistant" の 3 種類です。 | Roles are U"system", U"user", and U"assistant".
			/// @remark インターネットアクセスが必要です。 | Internet access is required.
			[[nodiscard]]
			String Complete(StringView apiKey, const Array<std::pair<String, String>>& messages, String& error);

			/// @brief ChatGPT にメッセージを送り、レスポンス（JSON）を取得する非同期タスクを返します。 | Returns an asynchronous task for sending a message to ChatGPT and retrieving the response (JSON).
			/// @param apiKey OpenAI API キー | OpenAI API key
			/// @param message メッセージ | Message
			/// @return 非同期タスク | Asynchronous task
			/// @remark 戻り値の task が `(task.isReady() == true) && (task.getResponse().isOK() == true)` になれば結果を取得できます。 | The result can be retrieved if `(task.isReady() == true) && (task.getResponse().isOK() == true)`.
			/// @remark インターネットアクセスが必要です。 | Internet access is required.
			[[nodiscard]]
			AsyncHTTPTask CompleteAsync(StringView apiKey, StringView message);

			/// @brief ChatGPT にメッセージを送り、レスポンス（JSON）を取得する非同期タスクを返します。 | Returns an asynchronous task for sending messages to ChatGPT and retrieving the response (JSON).
			/// @param apiKey OpenAI API キー | OpenAI API key
			/// @param messages メッセージ（ロールとメッセージのペアの配列） | Array of message pairs (role and message)
			/// @return 非同期タスク | Asynchronous task
			/// @remark ロールは U"system", U"user", U"assistant" の 3 種類です。 | Roles are U"system", U"user", and U"assistant".
			/// @remark 戻り値の task が `(task.isReady() == true) && (task.getResponse().isOK() == true)` になれば結果を取得できます。 | The result can be retrieved if `(task.isReady() == true) && (task.getResponse().isOK() == true)`.
			/// @remark インターネットアクセスが必要です。 | Internet access is required.
			[[nodiscard]]
			AsyncHTTPTask CompleteAsync(StringView apiKey, const Array<std::pair<String, String>>& messages);

			/// @brief ChatGPT のレスポンス（JSON）から、返答メッセージを抽出して返します。 | Extracts and returns the response message from the ChatGPT response (JSON).
			/// @param response JSON レスポンス | JSON response
			/// @return 返答メッセージ。抽出に失敗した場合は空の文字列 | Response message. An empty string if extraction fails.
			/// @remark 通常は `AsyncHTTPTask::getAsJSON()` の戻り値を渡します。 | Typically, pass the return value of `AsyncHTTPTask::getAsJSON()`.
			[[nodiscard]]
			String GetContent(const JSON& response);
		}

		namespace Image
		{
			/// @brief テキストに基づいて DALL-E モデルを使用して生成された画像を取得します。 | Get an image generated by the DALL-E model based on the given text.
			/// @param apiKey OpenAI API キー | OpenAI API key
			/// @param prompt 画像を説明するテキスト。英語で 1000 文字以下 | Text describing the image, in English and up to 1000 characters
			/// @param size 生成する画像のサイズ。OpenAI::ImageSize256, OpenAI::ImageSize512, OpenAI::ImageSize1024 のいずれか | Size of the generated image. One of OpenAI::ImageSize256, OpenAI::ImageSize512, OpenAI::ImageSize1024
			/// @return 生成された画像。生成に失敗した場合は空の画像 | Generated image. An empty image if the generation fails.
			/// @remark インターネットアクセスが必要です。 | Internet access is required.
			[[nodiscard]]
			s3d::Image Create(StringView apiKey, StringView prompt, const Size& size = OpenAI::ImageSize256);

			/// @brief テキストに基づいて DALL-E モデルを使用して生成された 1 つまたは複数の画像を取得します。 | Get one or more images generated by the DALL-E model based on the given text.
			/// @param apiKey OpenAI API キー | OpenAI API key
			/// @param prompt 画像を説明するテキスト。英語で 1000 文字以下 | Text describing the image, in English and up to 1000 characters
			/// @param n 生成する画像の個数。1 以上 OpenAI::MaxImageCount 以下 | Number of images to generate, between 1 and OpenAI::MaxImageCount
			/// @param size 生成する画像のサイズ。OpenAI::ImageSize256, OpenAI::ImageSize512, OpenAI::ImageSize1024 のいずれか | Size of the generated images. One of OpenAI::ImageSize256, OpenAI::ImageSize512, OpenAI::ImageSize1024
			/// @return 生成された画像の配列。生成に失敗した場合は空の配列 | Array of generated images. An empty array if the generation fails.
			/// @remark インターネットアクセスが必要です。 | Internet access is required.
			[[nodiscard]]
			Array<s3d::Image> Create(StringView apiKey, StringView prompt, int32 n, const Size& size = OpenAI::ImageSize256);

			/// @brief テキストに基づいて DALL-E モデルを使用して画像を生成する非同期タスクを返します。 | Returns an asynchronous task that generates an image using the DALL-E model based on the given text.
			/// @param apiKey OpenAI API キー | OpenAI API key
			/// @param prompt 画像を説明するテキスト。英語で 1000 文字以下 | Text describing the image, in English and up to 1000 characters
			/// @param size 生成する画像のサイズ。OpenAI::ImageSize256, OpenAI::ImageSize512, OpenAI::ImageSize1024 のいずれか | Size of the generated image. One of OpenAI::ImageSize256, OpenAI::ImageSize512, OpenAI::ImageSize1024
			/// @return 生成された画像を返す非同期タスク | Asynchronous task that returns the generated image
			/// @remark 戻り値の task が `task.isReady() == true` になれば `task.get()` で結果を取得できます。 | The result can be retrieved if `task.isReady() == true`.
			/// @remark インターネットアクセスが必要です。 | Internet access is required.
			[[nodiscard]]
			AsyncTask<s3d::Image> CreateAsync(StringView apiKey, StringView prompt, const Size& size = OpenAI::ImageSize256);

			/// @brief テキストに基づいて DALL-E モデルを使用して 1 つまたは複数の画像を生成する非同期タスクを返します。 | Returns an asynchronous task that generates one or more images using the DALL-E model based on the given text.
			/// @param apiKey OpenAI API キー | OpenAI API key
			/// @param prompt 画像を説明するテキスト。英語で 1000 文字以下 | Text describing the image, in English and up to 1000 characters
			/// @param n 生成する画像の個数。1 以上 OpenAI::MaxImageCount 以下 | Number of images to generate, between 1 and OpenAI::MaxImageCount
			/// @param size 生成する画像のサイズ。OpenAI::ImageSize256, OpenAI::ImageSize512, OpenAI::ImageSize1024 のいずれか | Size of the generated image. One of OpenAI::ImageSize256, OpenAI::ImageSize512, OpenAI::ImageSize1024
			/// @return 生成された画像の配列を返す非同期タスク | Asynchronous task that returns an array of generated images
			/// @remark 戻り値の task が `task.isReady() == true` になれば `task.get()` で結果を取得できます。 | The result can be retrieved if `task.isReady() == true`.
			/// @remark インターネットアクセスが必要です。 | Internet access is required.
			[[nodiscard]]
			AsyncTask<Array<s3d::Image>> CreateAsync(StringView apiKey, StringView prompt, int32 n, const Size& size = OpenAI::ImageSize256);
		}
	}
}
